# -*- coding: utf-8 -*-
import os
import time
import threading
from datetime import datetime, timezone
from collections import defaultdict, deque

import requests
from flask import Flask, jsonify

# ========= –¢–í–û–ò –î–ê–ù–ù–´–ï (–≤–ø–∏—Å–∞–Ω–æ) =========
TELEGRAM_BOT_TOKEN = "7630671081:AAG17gVyITruoH_CYreudyTBm5RTpvNgwMA"
TELEGRAM_CHAT_ID   = "5723086631"
# ========================================

# -------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ / –æ–ø—Ä–æ—Å–∞ --------
FUT_SUFFIX = "_UMCBL"                          # USDT-M Futures —É Bitget
SYMBOLS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "TRXUSDT"]

# TF: –º–æ–∂–Ω–æ "1min","3min","5min","15min","30min","1h","4h","6h","12h","1day","1week","1M"
GRANULARITY = "1min"
EMA_FAST, EMA_SLOW = 9, 21
CANDLES_LIMIT = 220

# ==== ¬´—É–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç¬ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ ====
# –ü–æ—Ä–æ–≥ –±–ª–∏–∑–æ—Å—Ç–∏ EMA: –µ—Å–ª–∏ |EMA_fast - EMA_slow| / EMA_slow <= EPS_PCT,
# —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ª–∏–Ω–∏–∏ "–ø–æ—á—Ç–∏ –ø–µ—Ä–µ—Å–µ–∫–ª–∏—Å—å" ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´near-cross¬ª (–º—è–≥–∫–∏–π) —Å–∏–≥–Ω–∞–ª.
EPS_PCT = 0.001          # 0.1%  (0.0005 = 0.05%, 0.002 = 0.2%)
NEAR_CROSS_ALERTS = True # –≤–∫–ª—é—á–∏—Ç—å –º—è–≥–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
NEAR_COOLDOWN_SEC = 300  # –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ –º—è–≥–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç –ø–æ —Å–∏–º–≤–æ–ª—É
# ====================================================

COOLDOWN_SEC = 60                              # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ñ–Å–°–¢–ö–ò–ú–ò —Å–∏–≥–Ω–∞–ª–∞–º–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
HEARTBEAT_SEC = 3600                           # ¬´–Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è¬ª –Ω–µ —á–∞—â–µ 1/—á–∞—Å
SEND_INITIAL_BIAS = True                       # –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞

REQUEST_TIMEOUT = 12
SLEEP_BETWEEN_SYMBOLS = 0.25                   # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –º–æ–Ω–µ—Ç–∞–º–∏
LOOP_SLEEP = 1.5                               # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏

BASE_URL = "https://api.bitget.com"
_REQ_HEADERS = {
    "User-Agent": "futures-signal-bot/1.2",
    "Accept": "application/json",
}

# -------- –°–ª—É–∂–µ–±–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ --------
last_cross = {}                                   # –ø–æ—Å–ª–µ–¥–Ω—è—è –ñ–Å–°–¢–ö–ê–Ø —Å—Ç–æ—Ä–æ–Ω–∞ "BUY"/"SELL"
last_band_state = {}                              # –ø–æ—Å–ª–µ–¥–Ω—è—è "–∑–æ–Ω–∞": BUY / NEUTRAL / SELL
last_alert_time = defaultdict(lambda: 0.0)        # –∞–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è –∂—ë—Å—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
last_near_time = defaultdict(lambda: 0.0)         # –∞–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è –º—è–≥–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
last_heartbeat_time = defaultdict(lambda: 0.0)    # –∞–Ω—Ç–∏—Å–ø–∞–º –¥–ª—è ¬´–Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è¬ª
cl_buf = defaultdict(lambda: deque(maxlen=CANDLES_LIMIT))  # –±—É—Ñ–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏–π –ø–æ —Å–∏–º–≤–æ–ª—É

# -------- Flask --------
app = Flask(__name__)

# ================= –£—Ç–∏–ª–∏—Ç—ã =================
def now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()

def send_telegram(text: str) -> bool:
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        r = requests.post(
            url, json={"chat_id": TELEGRAM_CHAT_ID, "text": text},
            timeout=REQUEST_TIMEOUT,
        )
        r.raise_for_status()
        return True
    except Exception as e:
        print(f"[TG] send error: {e}")
        return False

def ema_pair(series, fast, slow):
    if len(series) < slow:
        return None, None

    def ema_full(prices, p):
        k = 2 / (p + 1.0)
        e = float(prices[0])
        for x in prices[1:]:
            e = x * k + e * (1 - k)
        return e

    return ema_full(series, fast), ema_full(series, slow)

# ---- –º–∞–ø–ø–∏–Ω–≥–∏ –≥—Ä–∞–Ω—É–ª—è—Ä–Ω–æ—Å—Ç–µ–π –¥–ª—è Bitget ----
# v2 –æ–∂–∏–¥–∞–µ—Ç —Å–µ–∫—É–Ω–¥—ã, v1 –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
_V2_GRAN_MAP = {
    "1min": "60",
    "3min": "180",
    "5min": "300",
    "15min": "900",
    "30min": "1800",
    "1h": "3600",
    "4h": "14400",
    "6h": "21600",
    "12h": "43200",
    "1day": "86400",
    "1week": "604800",
    "1M": "2592000",
}
def _to_v2_granularity(g: str) -> str:
    return _V2_GRAN_MAP.get(g, "60")  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1min

# ================= Bitget: —á—Ç–µ–Ω–∏–µ —Å–≤–µ—á–µ–π (Futures/MIX) =================
def _parse_ohlcv_payload(data):
    rows = data.get("data", []) or []
    out = []
    for row in rows:
        try:
            ts = int(float(row[0]))
            o = float(row[1]); h = float(row[2]); l = float(row[3]); c = float(row[4])
            v = float(row[5]) if len(row) > 5 else 0.0
            out.append([ts, o, h, l, c, v])
        except Exception:
            continue
    out.sort(key=lambda x: x[0])
    return out

def bitget_get_futures_candles(symbol_base: str, granularity: str, limit: int):
    """
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º v2: /api/v2/mix/market/candles  (granularity = —Å–µ–∫—É–Ω–¥—ã)
    –ï—Å–ª–∏ –∫–æ–¥ != 00000 ‚Äî –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –Ω–∞ v1: /api/mix/v1/market/candles (granularity = "1min"/...)
    """
    symbol = symbol_base + FUT_SUFFIX
    gran_v2 = _to_v2_granularity(granularity)

    # v2
    try:
        r = requests.get(
            f"{BASE_URL}/api/v2/mix/market/candles",
            params={"symbol": symbol, "granularity": gran_v2, "limit": str(limit)},
            headers=_REQ_HEADERS,
            timeout=REQUEST_TIMEOUT,
        )
        data = r.json()
        code = str(data.get("code"))
        if code == "00000":
            return _parse_ohlcv_payload(data)
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –Ω–∞ v1
            print(f"[{symbol}] v2 fail {code}: {data.get('msg')} (gran={gran_v2})")
    except Exception as e:
        print(f"[{symbol}] v2 exception: {e}")

    # v1 (backup)
    try:
        r = requests.get(
            f"{BASE_URL}/api/mix/v1/market/candles",
            params={"symbol": symbol, "granularity": granularity, "limit": str(limit)},
            headers=_REQ_HEADERS,
            timeout=REQUEST_TIMEOUT,
        )
        data = r.json()
        code = str(data.get("code"))
        if code == "00000":
            return _parse_ohlcv_payload(data)
        raise RuntimeError(f"[{symbol}] v1 fail {code}: {data.get('msg')} (gran={granularity})")
    except Exception as e:
        # –ø—É—Å—Ç—å –ø–æ–¥–Ω–∏–º–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –≤–µ—Ä—Ö ‚Äî –æ–Ω–æ –∑–∞–ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –∏ —Ü–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è
        raise

# ================= –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ =================
def analyze_and_alert(sym_base: str, candles):
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏–π
    closes = [c[4] for c in candles]
    for px in closes:
        if not cl_buf[sym_base] or px != cl_buf[sym_base][-1]:
            cl_buf[sym_base].append(px)

    if len(cl_buf[sym_base]) < EMA_SLOW:
        return

    fast, slow = ema_pair(list(cl_buf[sym_base]), EMA_FAST, EMA_SLOW)
    if fast is None or slow is None or slow == 0:
        return

    # –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –º–µ–∂–¥—É EMA
    diff_pct = (fast - slow) / slow  # –ø–æ–ª–æ–∂–∏—Ç. -> BUY, –æ—Ç—Ä–∏—Ü–∞—Ç. -> SELL

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º "–∑–æ–Ω—É": BUY/NEUTRAL/SELL —Å –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–æ–º EPS_PCT
    if diff_pct > EPS_PCT:
        band = "BUY"
    elif diff_pct < -EPS_PCT:
        band = "SELL"
    else:
        band = "NEUTRAL"

    prev_band = last_band_state.get(sym_base)
    prev_hard = last_cross.get(sym_base)

    # 1) –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –æ–¥–∏–Ω —Ä–∞–∑
    if prev_band is None and SEND_INITIAL_BIAS and band in ("BUY", "SELL"):
        price = candles[-1][4]
        side = "LONG (–ª–æ–Ω–≥)" if band == "BUY" else "SHORT (—à–æ—Ä—Ç)"
        msg = (f"‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å {sym_base}{FUT_SUFFIX}\n"
               f"–ò–¥–µ—è: {side}\n"
               f"–¶–µ–Ω–∞: {price:.6f}\n"
               f"EMA {EMA_FAST}/{EMA_SLOW} ‚Ä¢ TF {GRANULARITY}\n"
               f"Œî={diff_pct*100:.3f}% (–ø–æ—Ä–æ–≥ {EPS_PCT*100:.2f}%)")
        print(msg); send_telegram(msg)

    # 2) –ú–Ø–ì–ö–ò–ô —Å–∏–≥–Ω–∞–ª (near-cross) –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é –∑–æ–Ω—É —Ä—è–¥–æ–º —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π
    if NEAR_CROSS_ALERTS and band == "NEUTRAL" and prev_band in ("BUY", "SELL"):
        tnow = time.time()
        if tnow - last_near_time[sym_base] >= NEAR_COOLDOWN_SEC:
            price = candles[-1][4]
            toward = "SELL/SHORT" if prev_band == "BUY" else "BUY/LONG"
            msg = (f"üü° {sym_base}{FUT_SUFFIX}: –±–ª–∏–∑–∫–æ –∫ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—é ‚Üí –≤–æ–∑–º–æ–∂–µ–Ω {toward}\n"
                   f"–¶–µ–Ω–∞: {price:.6f}\n"
                   f"Œî={diff_pct*100:.3f}% (–ø–æ—Ä–æ–≥ {EPS_PCT*100:.2f}%) ‚Ä¢ TF {GRANULARITY} ‚Ä¢ EMA {EMA_FAST}/{EMA_SLOW}")
            print(msg); send_telegram(msg)
            last_near_time[sym_base] = tnow

    # 3) –ñ–Å–°–¢–ö–ò–ô —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
    if prev_band is not None and prev_band != band and band in ("BUY", "SELL"):
        tnow = time.time()
        if tnow - last_alert_time[sym_base] >= COOLDOWN_SEC:
            price = candles[-1][4]
            side = "LONG (–ø–æ–∫—É–ø–∞—Ç—å/–æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ª–æ–Ω–≥)" if band == "BUY" else "SHORT (–ø—Ä–æ–¥–∞–≤–∞—Ç—å/–æ—Ç–∫—Ä—ã–≤–∞—Ç—å —à–æ—Ä—Ç)"
            msg = (f"üîî {band} {sym_base}{FUT_SUFFIX}\n"
                   f"–ò–¥–µ—è: {side}\n"
                   f"–¶–µ–Ω–∞: {price:.6f}\n"
                   f"EMA {EMA_FAST}/{EMA_SLOW} ‚Ä¢ TF {GRANULARITY}\n"
                   f"Œî={diff_pct*100:.3f}% (–ø–æ—Ä–æ–≥ {EPS_PCT*100:.2f}%)")
            print(msg); send_telegram(msg)
            last_alert_time[sym_base] = tnow
            last_cross[sym_base] = band

    # 4) Heartbeat —Ä–∞–∑ –≤ —á–∞—Å
    hb_now = time.time()
    if band and hb_now - last_heartbeat_time[sym_base] >= HEARTBEAT_SEC:
        price = candles[-1][4]
        side = {"BUY": "LONG", "SELL": "SHORT", "NEUTRAL": "NEUTRAL"}[band]
        hb = (f"‚ÑπÔ∏è {sym_base}{FUT_SUFFIX}: –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –Ω–µ—Ç. –°–µ–π—á–∞—Å {side}, "
              f"—Ü–µ–Ω–∞ {price:.6f}. Œî={diff_pct*100:.3f}% (–ø–æ—Ä–æ–≥ {EPS_PCT*100:.2f}%), TF {GRANULARITY}, EMA {EMA_FAST}/{EMA_SLOW}.")
        print(hb); send_telegram(hb)
        last_heartbeat_time[sym_base] = hb_now

    last_band_state[sym_base] = band

# ================= –†–∞–±–æ—á–∏–π —Ü–∏–∫–ª =================
def worker_loop():
    hdr = (f"ü§ñ –§—å—é—á–µ—Ä—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω\n"
           f"–ü–∞—Ä—ã: {', '.join(s + FUT_SUFFIX for s in SYMBOLS)}\n"
           f"TF: {GRANULARITY} ‚Ä¢ EMA {EMA_FAST}/{EMA_SLOW}\n"
           f"¬´Near-cross¬ª –ø–æ—Ä–æ–≥: ¬±{EPS_PCT*100:.2f}% (cooldown {NEAR_COOLDOWN_SEC}s)\n"
           f"–ñ—ë—Å—Ç–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–æ—Ä–æ–Ω—ã (cooldown {COOLDOWN_SEC}s).")
    print(f"[{now_iso()}] worker started.")
    send_telegram(hdr)

    while True:
        for base in SYMBOLS:
            try:
                candles = bitget_get_futures_candles(base, GRANULARITY, CANDLES_LIMIT)
                analyze_and_alert(base, candles)
            except Exception as e:
                print(f"[{base}{FUT_SUFFIX}] fetch/analyze error: {e}")
            time.sleep(SLEEP_BETWEEN_SYMBOLS)
        time.sleep(LOOP_SLEEP)

# ================= HTTP keep-alive & —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã =================
@app.route("/")
def root():
    return "ok"

@app.route("/status")
def status():
    return jsonify({
        "ok": True,
        "mode": "futures-umcbl",
        "symbols": [s + FUT_SUFFIX for s in SYMBOLS],
        "tf": GRANULARITY,
        "ema": {"fast": EMA_FAST, "slow": EMA_SLOW},
        "eps_pct": EPS_PCT,
        "near_cross_alerts": NEAR_CROSS_ALERTS,
        "cooldown_sec": COOLDOWN_SEC,
        "near_cooldown_sec": NEAR_COOLDOWN_SEC,
        "heartbeat_sec": HEARTBEAT_SEC,
        "send_initial_bias": SEND_INITIAL_BIAS,
        "time": now_iso(),
        "last_cross": last_cross,
        "last_band_state": last_band_state,
    })

@app.route("/ping")
def ping():
    ok = send_telegram(f"üß™ Ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {now_iso()}")
    return jsonify({"sent": ok, "time": now_iso()})

def run():
    th = threading.Thread(target=worker_loop, daemon=True)
    th.start()
    port = int(os.environ.get("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    run()
