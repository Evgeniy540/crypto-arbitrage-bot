import os
import time
import threading
from datetime import datetime, timezone
import requests
from flask import Flask, jsonify

# ========= –ü–ê–†–ê–ú–ï–¢–†–´ =========
TELEGRAM_BOT_TOKEN = "7630671081:AAG17gVyITruoH_CYreudyTBm5RTpvNgwMA"
TELEGRAM_CHAT_ID   = "5723086631"

SYMBOLS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "TRXUSDT", "PEPEUSDT", "BGBUSDT"]
TF_SECONDS = 60                # 1m
EMA_FAST, EMA_SLOW = 7, 14     # EMA 7/14
CANDLES_LIMIT = 200            # —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π —Ç—è–Ω–µ–º
COOLDOWN_SEC = 60              # –∑–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤
CHECK_INTERVAL = 5             # —Ä–∞–∑ –≤ N —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É
RENDER_PORT = int(os.getenv("PORT", "10000"))

# ========= –í–°–ü–û–ú–û–ì–ê–¢–û–†–´ =========
session = requests.Session()
session.headers.update({"User-Agent": "ema-bot/1.0"})

def now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()

def tsend(text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–æ–π –æ—Ç –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏."""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
    try:
        r = session.post(url, json=payload, timeout=10)
        if r.status_code != 200:
            print(f"[TELEGRAM] HTTP {r.status_code}: {r.text[:200]}")
    except Exception as e:
        print(f"[TELEGRAM] exception: {e}")

def ema_series(closes, period):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—è–¥ EMA —Å —Ç–µ–º –∂–µ —Ä–∞–∑–º–µ—Ä–æ–º, —á—Ç–æ –∏ closes."""
    k = 2 / (period + 1)
    ema = []
    s = None
    for i, c in enumerate(closes):
        if s is None:
            # —Å—Ç–∞—Ä—Ç—É–µ–º —Å –ø—Ä–æ—Å—Ç–æ–π —Å—Ä–µ–¥–Ω–µ–π –ø–æ –ø–µ—Ä–≤—ã–º 'period' —Ç–æ—á–∫–∞–º,
            # –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—å—à–µ ‚Äî –±–µ—Ä—ë–º –æ–±—ã—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            wnd = closes[max(0, i - period + 1):i + 1]
            s = sum(wnd) / len(wnd)
        else:
            s = c * k + s * (1 - k)
        ema.append(s)
    return ema

def parse_float(x):
    try:
        return float(x)
    except Exception:
        return None

def get_candles_bitget(symbol: str, granularity: int, limit: int):
    """
    –ü—ã—Ç–∞–µ–º—Å—è v2: /api/v2/spot/market/candles?symbol=BTCUSDT&granularity=60&limit=200
    –ï—Å–ª–∏ –∫–æ–¥ != 00000 –∏–ª–∏ 400 ‚Äî –ø—Ä–æ–±—É–µ–º v1: /api/spot/v1/market/candles?symbol=BTCUSDT&period=1min&limit=200
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π [(ts, open, high, low, close, volume), ...] –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é ts.
    """
    # ---- v2
    try:
        url_v2 = "https://api.bitget.com/api/v2/spot/market/candles"
        params = {"symbol": symbol, "granularity": str(granularity), "limit": str(limit)}
        r = session.get(url_v2, params=params, timeout=10)
        data = r.json()
        if r.status_code == 200 and data.get("code") == "00000":
            rows = data.get("data", [])
            out = []
            # v2 —Ñ–æ—Ä–º–∞—Ç: ["1700793600000","43019.9","43034.9","43019.9","43022.7","6.3"] (ts, o,h,l,c,vol) ‚Äî ts –≤ ms
            for row in rows:
                ts = int(row[0]) // 1000
                o = parse_float(row[1]); h = parse_float(row[2]); l = parse_float(row[3]); c = parse_float(row[4])
                v = parse_float(row[5])
                if None not in (o, h, l, c, v):
                    out.append((ts, o, h, l, c, v))
            out.sort(key=lambda x: x[0])
            if len(out) > 0:
                return out
        else:
            print(f"[{symbol}] v2 err: HTTP {r.status_code}, code={data.get('code')} msg={data.get('msg')}")
    except Exception as e:
        print(f"[{symbol}] v2 exception: {e}")

    # ---- v1 fallback
    try:
        url_v1 = "https://api.bitget.com/api/spot/v1/market/candles"
        period = {60: "1min", 300: "5min", 900: "15min", 3600: "1hour", 86400: "1day"}.get(granularity, "1min")
        params = {"symbol": symbol, "period": period, "limit": str(limit)}
        r = session.get(url_v1, params=params, timeout=10)
        data = r.json()
        # v1 —Ç–æ–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"code":"00000", "data": [...]}
        if r.status_code == 200 and data.get("code") == "00000":
            rows = data.get("data", [])
            out = []
            # v1 —Ñ–æ—Ä–º–∞—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, —Ç–æ—Ç –∂–µ –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π
            for row in rows:
                ts = int(row[0]) // 1000
                o = parse_float(row[1]); h = parse_float(row[2]); l = parse_float(row[3]); c = parse_float(row[4])
                v = parse_float(row[5])
                if None not in (o, h, l, c, v):
                    out.append((ts, o, h, l, c, v))
            out.sort(key=lambda x: x[0])
            if len(out) > 0:
                return out
        else:
            print(f"[{symbol}] v1 err: HTTP {r.status_code}, code={data.get('code')} msg={data.get('msg')}")
    except Exception as e:
        print(f"[{symbol}] v1 exception: {e}")

    return []

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
last_state = {}     # symbol -> {"side":"buy"/"sell","ts":close_ts}
last_sent  = {}     # symbol -> last send ts

def check_symbol(symbol: str):
    candles = get_candles_bitget(symbol, TF_SECONDS, CANDLES_LIMIT)
    if len(candles) < max(EMA_SLOW + 1, 25):
        print(f"[{symbol}] –º–∞–ª–æ —Å–≤–µ—á–µ–π: {len(candles)}")
        return

    closes = [c[4] for c in candles]
    fast = ema_series(closes, EMA_FAST)
    slow = ema_series(closes, EMA_SLOW)

    # –±–µ—Ä—ë–º –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏, —á—Ç–æ–±—ã –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å —Ñ–∞–∫—Ç –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    f_prev, f_now = fast[-2], fast[-1]
    s_prev, s_now = slow[-2], slow[-1]
    cross_up = f_prev <= s_prev and f_now > s_now
    cross_dn = f_prev >= s_prev and f_now < s_now

    close_ts = candles[-1][0]
    price = closes[-1]

    state = last_state.get(symbol)
    cool_ok = (time.time() - last_sent.get(symbol, 0)) >= COOLDOWN_SEC

    if cross_up and cool_ok and (not state or state.get("side") != "buy" or state.get("ts") != close_ts):
        txt = (
            f"üîî BUY {symbol}\n"
            f"–¶–µ–Ω–∞: {price}\n"
            f"EMA{EMA_FAST} –ø–µ—Ä–µ—Å–µ–∫–ª–∞ EMA{EMA_SLOW} –í–í–ï–†–• (TF 1m)\n"
            f"{now_iso()}"
        )
        tsend(txt)
        last_state[symbol] = {"side": "buy", "ts": close_ts}
        last_sent[symbol] = time.time()
        print(f"[{symbol}] BUY signal sent")

    elif cross_dn and cool_ok and (not state or state.get("side") != "sell" or state.get("ts") != close_ts):
        txt = (
            f"üîî SELL {symbol}\n"
            f"–¶–µ–Ω–∞: {price}\n"
            f"EMA{EMA_FAST} –ø–µ—Ä–µ—Å–µ–∫–ª–∞ EMA{EMA_SLOW} –í–ù–ò–ó (TF 1m)\n"
            f"{now_iso()}"
        )
        tsend(txt)
        last_state[symbol] = {"side": "sell", "ts": close_ts}
        last_sent[symbol] = time.time()
        print(f"[{symbol}] SELL signal sent")

def worker_loop():
    # —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    tsend(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! EMA {EMA_FAST}/{EMA_SLOW}, TF 1m. –°–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∫—Ç—É –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π.")
    print("Worker started")
    while True:
        start = time.time()
        for sym in SYMBOLS:
            try:
                check_symbol(sym)
            except Exception as e:
                print(f"[{sym}] loop exception: {e}")
        # –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –ø—Ä–æ–≤–µ—Ä–∫–∏
        sleep_left = CHECK_INTERVAL - (time.time() - start)
        if sleep_left > 0:
            time.sleep(sleep_left)

# ========= FLASK –¥–ª—è Render =========
app = Flask(__name__)

@app.get("/")
def root_ok():
    return "ok"

@app.get("/status")
def status():
    return jsonify({
        "ok": True,
        "time": now_iso(),
        "tf": "1m",
        "ema": f"{EMA_FAST}/{EMA_SLOW}",
        "symbols": SYMBOLS,
        "cooldown_sec": COOLDOWN_SEC
    })

def run_http():
    # –•–æ—Å—Ç 0.0.0.0 –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –Ω–∞ Render
    app.run(host="0.0.0.0", port=RENDER_PORT, debug=False, use_reloader=False)

if __name__ == "__main__":
    # HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_http, daemon=True).start()
    # —Ä–∞–±–æ—á–∏–π —Ü–∏–∫–ª —Å–∏–≥–Ω–∞–ª–æ–≤
    worker_loop()
