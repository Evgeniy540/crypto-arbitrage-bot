# -*- coding: utf-8 -*-
"""
Bitget EMA Signal Bot (—Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã, –±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏)
–§–∏–ª—å—Ç—Ä—ã: EMA, RSI, ATR
–ö–æ–º–∞–Ω–¥—ã –≤ Telegram: /status, /setcooldown, /settf, /setsymbols, /help
"""

import time
import requests
import pandas as pd
import numpy as np
from flask import Flask, request
from threading import Thread

# ==== –¢–í–û–ò –î–ê–ù–ù–´–ï ====
TELEGRAM_BOT_TOKEN = "7630671081:AAG17gVyITruoH_CYreudyTBm5RTpvNgwMA"
TELEGRAM_CHAT_ID = "5723086631"

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
BITGET_CANDLES_URL = "https://api.bitget.com/api/mix/v1/market/candles"
SYMBOLS = ["BTCUSDT_UMCBL", "ETHUSDT_UMCBL", "XRPUSDT_UMCBL",
           "SOLUSDT_UMCBL", "TRXUSDT_UMCBL"]
TIMEFRAMES = {"5m": 300, "15m": 900, "1h": 3600}
SLEEP = 60  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
SIGNAL_COOLDOWN = 300  # –∫—É–ª–¥–∞—É–Ω —Å–∏–≥–Ω–∞–ª–æ–≤ (5 –º–∏–Ω—É—Ç)

last_signals = {}  # { "BTCUSDT_UMCBL_5m": timestamp }

# ==== –§–£–ù–ö–¶–ò–ò ====
def send_telegram(msg: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    try:
        requests.post(url, json={"chat_id": TELEGRAM_CHAT_ID, "text": msg})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


def get_candles(symbol: str, tf: str, limit: int = 200):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–µ–π —Å Bitget"""
    params = {"symbol": symbol, "granularity": TIMEFRAMES[tf], "limit": limit}
    try:
        r = requests.get(BITGET_CANDLES_URL, params=params, timeout=10)
        data = r.json()
        if "data" not in data:
            print("–û—à–∏–±–∫–∞ Bitget:", data)
            return None
        df = pd.DataFrame(data["data"],
                          columns=["ts", "open", "high", "low", "close", "volume", "baseVolume"])
        df["close"] = df["close"].astype(float)
        df["high"] = df["high"].astype(float)
        df["low"] = df["low"].astype(float)
        df = df.iloc[::-1].reset_index(drop=True)
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ—á–µ–π {symbol}: {e}")
        return None


def rsi(series, period=14):
    """RSI"""
    delta = series.diff()
    gain = delta.clip(lower=0)
    loss = -delta.clip(upper=0)
    avg_gain = gain.rolling(period).mean()
    avg_loss = loss.rolling(period).mean()
    rs = avg_gain / avg_loss
    return 100 - (100 / (1 + rs))


def atr(df, period=14):
    """ATR"""
    high_low = df["high"] - df["low"]
    high_close = np.abs(df["high"] - df["close"].shift())
    low_close = np.abs(df["low"] - df["close"].shift())
    tr = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
    return tr.rolling(period).mean()


def filters(df):
    """–§–∏–ª—å—Ç—Ä—ã —Ä—ã–Ω–∫–∞"""
    close = df["close"].iloc[-1]
    ema50 = df["close"].ewm(span=50).mean().iloc[-1]
    ema200 = df["close"].ewm(span=200).mean().iloc[-1]
    rsi_val = rsi(df["close"]).iloc[-1]
    atr_val = atr(df).iloc[-1] / close * 100
    trend_ok = ema50 > ema200
    rsi_ok = 40 < rsi_val < 70
    atr_ok = atr_val > 0.5
    all_green = trend_ok and rsi_ok and atr_ok
    return all_green, trend_ok, rsi_val, atr_val


def ema_strategy(symbol: str, tf: str):
    """EMA —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    df = get_candles(symbol, tf)
    if df is None or len(df) < 200:
        return None

    df["EMA9"] = df["close"].ewm(span=9).mean()
    df["EMA21"] = df["close"].ewm(span=21).mean()

    signal = None
    if df["EMA9"].iloc[-2] < df["EMA21"].iloc[-2] and df["EMA9"].iloc[-1] > df["EMA21"].iloc[-1]:
        signal = "üü¢ –í–æ–∑–º–æ–∂–µ–Ω LONG"
    elif df["EMA9"].iloc[-2] > df["EMA21"].iloc[-2] and df["EMA9"].iloc[-1] < df["EMA21"].iloc[-1]:
        signal = "üî¥ –í–æ–∑–º–æ–∂–µ–Ω SHORT"

    if signal:
        key = f"{symbol}_{tf}"
        now = time.time()
        if key in last_signals and now - last_signals[key] < SIGNAL_COOLDOWN:
            return None  # –∫—É–ª–¥–∞—É–Ω
        last_signals[key] = now

        all_green, trend_ok, rsi_val, atr_val = filters(df)
        status = "‚úÖ –§–∏–ª—å—Ç—Ä—ã –ó–ï–õ–Å–ù–´–ï" if all_green else "‚ùå –§–∏–ª—å—Ç—Ä—ã –ö–†–ê–°–ù–´–ï"
        return f"{signal}\n{symbol} {tf}\n{status}\nRSI={rsi_val:.1f} | ATR={atr_val:.2f}%"
    return None


def main_loop():
    send_telegram(
        "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (EMA/RSI/ATR)\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /status, /setcooldown, /settf, /setsymbols, /help"
    )
    while True:
        for symbol in SYMBOLS:
            for tf in TIMEFRAMES:
                signal = ema_strategy(symbol, tf)
                if signal:
                    send_telegram(signal)
                time.sleep(1)  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API
        time.sleep(SLEEP)


# ==== Flask –¥–ª—è keep-alive –∏ –∫–æ–º–∞–Ω–¥ ====
app = Flask(__name__)

@app.route("/", methods=["GET", "POST"])
def home():
    return "EMA Signal Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!"


@app.route(f"/{TELEGRAM_BOT_TOKEN}", methods=["POST"])
def telegram_webhook():
    """Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ Telegram"""
    global SIGNAL_COOLDOWN, TIMEFRAMES, SYMBOLS

    data = request.get_json()
    if not data or "message" not in data:
        return "ok"

    chat_id = str(data["message"]["chat"]["id"])
    text = data["message"].get("text", "")

    if chat_id != TELEGRAM_CHAT_ID:
        return "ok"

    if text.strip().lower() == "/status":
        report = []
        for symbol in SYMBOLS:
            for tf in TIMEFRAMES:
                df = get_candles(symbol, tf)
                if df is None:
                    continue
                all_green, trend_ok, rsi_val, atr_val = filters(df)
                status = "‚úÖ" if all_green else "‚ùå"
                report.append(f"{symbol} {tf}: {status} | RSI={rsi_val:.1f} | ATR={atr_val:.2f}%")
        send_telegram("üìä –°—Ç–∞—Ç—É—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n" + "\n".join(report))

    elif text.startswith("/setcooldown"):
        try:
            value = int(text.split()[1])
            SIGNAL_COOLDOWN = value
            send_telegram(f"‚úÖ –ö—É–ª–¥–∞—É–Ω —Å–∏–≥–Ω–∞–ª–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {SIGNAL_COOLDOWN} —Å–µ–∫.")
        except:
            send_telegram("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /setcooldown 300")

    elif text.startswith("/settf"):
        try:
            parts = text.split()[1].split(",")
            new_tfs = {}
            for p in parts:
                p = p.strip()
                if p == "5m":
                    new_tfs["5m"] = 300
                elif p == "15m":
                    new_tfs["15m"] = 900
                elif p == "1h":
                    new_tfs["1h"] = 3600
            if new_tfs:
                TIMEFRAMES = new_tfs
                send_telegram(f"‚úÖ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –∏–∑–º–µ–Ω–µ–Ω—ã: {','.join(TIMEFRAMES.keys())}")
            else:
                send_telegram("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: /settf 5m,15m")
        except:
            send_telegram("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü—Ä–∏–º–µ—Ä: /settf 5m,15m")

    elif text.startswith("/setsymbols"):
        try:
            parts = text.split()[1].split(",")
            new_syms = [p.strip() for p in parts if p.strip()]
            if new_syms:
                SYMBOLS = new_syms
                send_telegram(f"‚úÖ –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –∏–∑–º–µ–Ω—ë–Ω: {','.join(SYMBOLS)}")
            else:
                send_telegram("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: /setsymbols BTCUSDT_UMCBL,ETHUSDT_UMCBL")
        except:
            send_telegram("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü—Ä–∏–º–µ—Ä: /setsymbols BTCUSDT_UMCBL,ETHUSDT_UMCBL")

    elif text.strip().lower() == "/help":
        help_msg = (
            "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã (RSI/ATR/EMA)\n"
            "/setcooldown X ‚Üí –∫—É–ª–¥–∞—É–Ω —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å–µ–∫.)\n"
            "/settf 5m,15m,1h ‚Üí –∑–∞–¥–∞—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã\n"
            "/setsymbols BTCUSDT_UMCBL,ETHUSDT_UMCBL ‚Üí –≤—ã–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã\n"
            "/help ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
        )
        send_telegram(help_msg)

    return "ok"


if __name__ == "__main__":
    Thread(target=main_loop, daemon=True).start()
    app.run(host="0.0.0.0", port=5000)
