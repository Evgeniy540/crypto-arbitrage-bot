import os
import time
import math
import threading
import logging
from datetime import datetime, timezone
from typing import Dict, List

import requests
from flask import Flask, jsonify

# ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ Telegram (–ø–æ –≤–∞—à–µ–π –ø—Ä–æ—Å—å–±–µ –≤–ø–∏—Å–∞–ª –ø—Ä—è–º–æ –≤ –∫–æ–¥)
TELEGRAM_BOT_TOKEN = "7630671081:AAG17gVyITruoH_CYreudyTBm5RTpvNgwMA"
TELEGRAM_CHAT_ID   = "5723086631"

# –ü–∞—Ä—ã SPOT –Ω–∞ Bitget
SYMBOLS = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "XRPUSDT", "BGBUSDT", "TRXUSDT", "PEPEUSDT"]

# –¢–∞–π–º—Ñ—Ä–µ–π–º —Å–≤–µ—á–µ–π Bitget v2: "1m", "5m", "15m", "1h", ...
TIMEFRAME = "1m"

# EMA –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
EMA_SHORT = 7
EMA_LONG  = 14

# –°–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π —Ç—è–Ω—É—Ç—å (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > EMA_LONG * 3, —á—Ç–æ–±—ã —Å–≥–ª–∞–¥–∏—Ç—å —Å—Ç–∞—Ä—Ç)
CANDLES_LIMIT = 220

# –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –æ–ø—Ä–æ—Å–∞ (—Å–µ–∫)
SLEEP_SEC = 12

# –ö—É–ª–¥–∞—É–Ω –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
SIGNAL_COOLDOWN_SEC = 60

# –°–æ–æ–±—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∫—Ç—É –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
SEND_ONLY_ON_CROSS = True

# =================================================


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–æ—Ä–æ—á–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
)
log = logging.getLogger("bitget_ema_bot")

session = requests.Session()
session.headers.update({"User-Agent": "ema-signal-bot/1.0"})

BITGET_BASE = "https://api.bitget.com"


def send_tg(text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        r = session.post(url, json=payload, timeout=15)
        if r.status_code != 200:
            log.warning("Telegram send error: %s %s", r.status_code, r.text[:300])
    except Exception as e:
        log.exception("Telegram exception: %s", e)


def get_candles(symbol: str, time_frame: str, limit: int) -> List[List]:
    """
    Bitget v2 SPOT candles.
    GET /api/v2/spot/market/candles?symbol=BTCUSDT&timeFrame=1m&limit=200

    –û—Ç–≤–µ—Ç: data -> —Å–ø–∏—Å–æ–∫ –º–∞—Å—Å–∏–≤–æ–≤, –≥–¥–µ –æ–±—ã—á–Ω–æ:
    [ts, open, high, low, close, volume, quoteVolume]
    –ó–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–æ–∫–∏, ts –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö/—Å–µ–∫—É–Ω–¥–∞—Ö (Bitget –≤—ã–¥–∞–µ—Ç –º—Å).
    """
    url = f"{BITGET_BASE}/api/v2/spot/market/candles"
    params = {"symbol": symbol, "timeFrame": time_frame, "limit": str(limit)}
    r = session.get(url, params=params, timeout=20)
    if r.status_code != 200:
        raise RuntimeError(f"{symbol} –æ—à–∏–±–∫–∞ —Å–≤–µ—á–µ–π: HTTP {r.status_code}: {r.text[:300]}")
    d = r.json()
    if not isinstance(d, dict) or "data" not in d:
        raise RuntimeError(f"{symbol} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {d}")
    return d["data"]


def to_closes(candles: List[List]) -> List[float]:
    """–î–æ—Å—Ç–∞—ë–º —Ü–µ–Ω—ã close –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–≤–µ—á–µ–π Bitget. –†–µ–≤–µ—Ä—Å–∏–º, —á—Ç–æ–±—ã –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º."""
    if not candles:
        return []
    # Bitget –æ—Ç–¥–∞—ë—Ç –Ω–æ–≤—ã–µ -> —Å—Ç–∞—Ä—ã–µ. –†–∞–∑–≤–µ—Ä–Ω–µ–º:
    arr = list(reversed(candles))
    closes = []
    for c in arr:
        # –æ–∂–∏–¥–∞–µ–º [ts, open, high, low, close, volume, quote]
        if len(c) >= 5:
            val = c[4]
        else:
            # fallback (–ø–æ—á—Ç–∏ –Ω–µ —Å–ª—É—á–∞–µ—Ç—Å—è)
            val = c[-1]
        try:
            closes.append(float(val))
        except:
            # –ø—Ä–æ–ø—É—Å—Ç–∏–º –±–∏—Ç—É—é —Å–≤–µ—á—É
            continue
    return closes


def ema(series: List[float], period: int) -> List[float]:
    """–ü—Ä–æ—Å—Ç–∞—è EMA –±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫."""
    if period <= 1 or len(series) < period:
        return []
    k = 2 / (period + 1)
    out = []
    # —Å—Ç–∞—Ä—Ç ‚Äî SMA –ø–µ—Ä–≤—ã—Ö period –∑–Ω–∞—á–µ–Ω–∏–π
    sma = sum(series[:period]) / period
    out.extend([math.nan] * (period - 1))
    out.append(sma)
    prev = sma
    for price in series[period:]:
        val = price * k + prev * (1 - k)
        out.append(val)
        prev = val
    return out


def last_cross_signal(ema_fast: List[float], ema_slow: List[float]):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ:
      - BUY  –µ—Å–ª–∏ fast –ø–µ—Ä–µ—Å—ë–∫ slow –≤–≤–µ—Ä—Ö
      - SELL –µ—Å–ª–∏ fast –ø–µ—Ä–µ—Å—ë–∫ slow –≤–Ω–∏–∑
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º ('BUY'|'SELL'|None)
    """
    if not ema_fast or not ema_slow:
        return None
    n = min(len(ema_fast), len(ema_slow))
    if n < 2:
        return None

    f1, s1 = ema_fast[n - 2], ema_slow[n - 2]
    f2, s2 = ema_fast[n - 1], ema_slow[n - 1]

    if math.isnan(f1) or math.isnan(s1) or math.isnan(f2) or math.isnan(s2):
        return None

    # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
    if f1 <= s1 and f2 > s2:
        return "BUY"
    # –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤–Ω–∏–∑
    if f1 >= s1 and f2 < s2:
        return "SELL"
    return None


def fmt_ts(ts: float = None) -> str:
    dt = datetime.now(timezone.utc) if ts is None else datetime.fromtimestamp(ts, tz=timezone.utc)
    return dt.isoformat()


def build_signal_text(side: str, symbol: str, price: float) -> str:
    bell = "üîî"
    return (
        f"{bell} {side} {symbol}\n"
        f"–¶–µ–Ω–∞: {price:.6f}\n"
        f"EMA{EMA_SHORT} vs EMA{EMA_LONG} (TF {TIMEFRAME})\n"
        f"{fmt_ts()}"
    )


class EmaWorker:
    def __init__(self, symbols: List[str]):
        self.symbols = symbols
        self.last_signal_at: Dict[str, float] = {}   # unix time –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        self.thread = threading.Thread(target=self.run, daemon=True)

    def start(self):
        self.thread.start()

    def run(self):
        send_tg(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! EMA {EMA_SHORT}/{EMA_LONG}, TF {TIMEFRAME}.\n–°–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∫—Ç—É –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π.")
        while True:
            for sym in self.symbols:
                try:
                    candles = get_candles(sym, TIMEFRAME, CANDLES_LIMIT)
                    closes = to_closes(candles)
                    if len(closes) < EMA_LONG + 2:
                        log.warning("%s –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö: %d", sym, len(closes))
                        continue

                    e_fast = ema(closes, EMA_SHORT)
                    e_slow = ema(closes, EMA_LONG)

                    sig = last_cross_signal(e_fast, e_slow)
                    if sig is None and SEND_ONLY_ON_CROSS:
                        continue

                    # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ = –ø–æ—Å–ª–µ–¥–Ω–∏–π close
                    last_price = closes[-1]

                    if sig is not None:
                        now = time.time()
                        last_at = self.last_signal_at.get(sym, 0)
                        if now - last_at < SIGNAL_COOLDOWN_SEC:
                            # –∫—É–ª–¥–∞—É–Ω
                            continue
                        self.last_signal_at[sym] = now
                        text = build_signal_text(sig, sym, last_price)
                        send_tg(text)
                        log.info("Signal %s %s @ %.8f", sig, sym, last_price)

                except Exception as e:
                    log.error("%s –æ—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: %s", sym, e)
                time.sleep(0.4)  # –º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
            time.sleep(SLEEP_SEC)


# ---------------------- HTTP "–∂–∏–≤–æ–π" —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Render ----------------------

app = Flask(__name__)
worker = EmaWorker(SYMBOLS)

@app.route("/", methods=["GET"])
def root():
    return "ok", 200

@app.route("/status", methods=["GET"])
def status():
    return jsonify({
        "ok": True,
        "time": fmt_ts(),
        "tf": TIMEFRAME,
        "ema": f"{EMA_SHORT}/{EMA_LONG}",
        "symbols": SYMBOLS,
        "cooldown_sec": SIGNAL_COOLDOWN_SEC
    }), 200


def main():
    # —Å—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    worker.start()

    # –ø–æ–¥–Ω–∏–º–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä (Render –ª—é–±–∏—Ç –ø—Ä–∏–≤—è–∑–∫—É –∫ –ø–æ—Ä—Ç—É)
    port = int(os.environ.get("PORT", "10000"))
    log.info("–°–µ—Ä–≤–∏—Å —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç %d", port)
    app.run(host="0.0.0.0", port=port)


if __name__ == "__main__":
    main()
