# -*- coding: utf-8 -*-
import os
import time
import math
import json
import threading
from datetime import datetime, timezone

import requests
from flask import Flask, jsonify

# ========= –¢–í–û–ò –î–ê–ù–ù–´–ï (–º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å) =========
# –õ—É—á—à–µ –±—Ä–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render, –Ω–æ –ø–æ —Ç–≤–æ–∏–º –ø—Ä–æ—Å—å–±–∞–º –≤–ø–∏—Å–∞–ª –Ω–∞–ø—Ä—è–º—É—é.
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7630671081:AAG17gVyITruoH_CYreudyTBm5RTpvNgwMA")
TELEGRAM_CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID",   "5723086631")  # —Å—Ç—Ä–æ–∫–æ–π ‚Äî —Ç–∞–∫ –Ω–∞–¥—ë–∂–Ω–µ–µ
# ==========================================================

app = Flask(__name__)

# -------- –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ --------
FUT_SUFFIX = "_UMCBL"  # Bitget USDT-M perpetual
DEFAULT_SYMBOLS = ["BTCUSDT","ETHUSDT","SOLUSDT","XRPUSDT","TRXUSDT","PEPEUSDT"]

CONFIG = {
    "symbols": DEFAULT_SYMBOLS[:],
    "base_tf": "5m",
    "fallback_tf": "1m",      # –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è "—É—Å–∏–ª–µ–Ω–∏—è" —Å–∏–≥–Ω–∞–ª–æ–≤, –µ—Å–ª–∏ –Ω–∞ 5m —Ç–∏—Ö–æ
    "ema_fast": 9,
    "ema_slow": 21,
    "min_candles": 10,
    "strength": 0.05,         # –¥–æ–ª—è (0.05=5%)
    "atr_min": 0.05,          # –¥–æ–ª—è; –ø–æ –∏—Ç–æ–≥—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏–≤–µ–¥—ë–º –∫ 0.05..0.10
    "atr_max": 0.10,
    "check_interval_s": 120,  # –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
    "cooldown_min": 10,       # –∞–Ω—Ç–∏—Å–ø–∞–º –ø–æ —Å–∏–º–≤–æ–ª—É
    "near_cross_eps": 0.001,  # 0.10% –±–ª–∏–∑–æ—Å—Ç—å EMA9/EMA21
    "ema_slope_min": 0.0,     # —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∫–ª–æ–Ω–∞ EMA9 (0=–æ—Ç–∫–ª—é—á–µ–Ω)
}

# –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã –¥–ª—è ATR (–¥–æ–ª–∏)
ATR_MIN_ALLOWED = 0.001   # 0.10%
ATR_MAX_ALLOWED = 0.20    # 20.0%

# –ê–Ω—Ç–∏—Å–ø–∞–º –∏ –∂–∏–≤–æ—Å—Ç—å
_last_signal_ts_any = 0.0
_last_alive_notice_ts = 0.0
_symbol_cooldown = {}    # { "BTCUSDT": unixtime_last_signal }
_updates_offset = 0

# --------- –£—Ç–∏–ª–∏—Ç—ã –≤—Ä–µ–º–µ–Ω–∏/–ª–æ–≥–æ–≤ ----------
def now_ts() -> float:
    return time.time()

def ts_to_str(ts: float) -> str:
    return datetime.fromtimestamp(ts).strftime("%Y-%m-%d %H:%M:%S")

def log(msg: str):
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {msg}", flush=True)

# --------- Telegram ----------
def tg_url(method: str) -> str:
    return f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/{method}"

def send_msg(chat_id: str, text: str, disable_web_page_preview=True):
    try:
        requests.post(
            tg_url("sendMessage"),
            json={
                "chat_id": chat_id,
                "text": text,
                "disable_web_page_preview": disable_web_page_preview,
                "parse_mode": "HTML"
            },
            timeout=15
        )
    except Exception as e:
        log(f"TG send error: {e}")

def _parse_pct(x: str) -> float:
    """
    –ü—Ä–∏–Ω—è—Ç–∞—è –Ω–æ—Ç–∞—Ü–∏—è:
    - '0.05' –∏–ª–∏ '.05' -> 0.05 (5%)
    - '5' –∏–ª–∏ '5%'     -> 0.05 (5%)
    """
    s = x.strip().lower().replace(',', '.')
    if s.endswith('%'):
        s = s[:-1].strip()
        val = float(s) / 100.0
        return val
    if s.startswith('.'):
        s = '0' + s
    val = float(s)
    if val > 1.0:
        val = val / 100.0
    return val

def apply_mode(mode: str):
    m = mode.lower()
    if m == "ultra":
        CONFIG.update({
            "strength": 0.03,           # 3%
            "atr_min": 0.05,            # 5%
            "atr_max": 0.10,            # 10% (—É —Ç–µ–±—è –∫–æ–¥ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ –¥–µ—Ä–∂–∞–ª 5..10)
            "min_candles": 8,
            "cooldown_min": 5,
            "check_interval_s": 60,
            "near_cross_eps": 0.0015,   # 0.15%
            "ema_slope_min": 0.0,
        })
        return True
    elif m == "normal":
        CONFIG.update({
            "strength": 0.05,           # 5%
            "atr_min": 0.05,            # 5%
            "atr_max": 0.10,            # 10%
            "min_candles": 15,
            "cooldown_min": 15,
            "check_interval_s": 300,
            "near_cross_eps": 0.001,    # 0.10%
            "ema_slope_min": 0.0,
        })
        return True
    return False

# --------- Bitget —Å–≤–µ—á–∏ ----------
BITGET_HOST = "https://api.bitget.com"
HISTORY_CANDLES = "/api/mix/v1/market/history-candles"

# TF -> granularity
GRANULARITY_MAP = {
    "1m": "1min",
    "3m": "3min",
    "5m": "5min",
    "15m": "15min",
}

def fetch_candles(symbol: str, tf: str, limit: int = 300):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç candles –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–æ–≤ (ts, open, high, low, close) ‚Äî –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º.
    """
    inst_id = f"{symbol}{FUT_SUFFIX}"
    gran = GRANULARITY_MAP.get(tf, "5min")
    params = {"symbol": inst_id, "granularity": gran}
    headers = {"User-Agent": "Mozilla/5.0"}

    try:
        r = requests.get(BITGET_HOST + HISTORY_CANDLES, params=params, headers=headers, timeout=15)
        data = r.json()
        if data.get("code") not in (None, "00000", 0):
            log(f"Bitget error {data.get('code')}: {data.get('msg')}")
            return []
        arr = data.get("data") or []
        # –§–æ—Ä–º–∞—Ç: [timestamp(ms), open, high, low, close, volume, ...] ‚Äî —Å—Ç—Ä–æ–∫–∏
        # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫ —Å—Ç–∞—Ä—ã–º -> –Ω–æ–≤—ã–º
        arr = list(reversed(arr))
        out = []
        for row in arr[-limit:]:
            ts_ms = int(float(row[0]))
            o = float(row[1]); h = float(row[2]); l = float(row[3]); c = float(row[4])
            out.append((ts_ms/1000.0, o, h, l, c))
        return out
    except Exception as e:
        log(f"fetch_candles error {symbol} {tf}: {e}")
        return []

# --------- –¢–ê: EMA –∏ ATR ----------
def ema_series(values, period):
    """
    –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–Ω—è—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–∫–æ–π –∂–µ –¥–ª–∏–Ω—ã.
    """
    if not values or period <= 0:
        return []
    k = 2.0 / (period + 1.0)
    ema = []
    s = sum(values[:period]) / period if len(values) >= period else sum(values)/len(values)
    ema.append(s)
    start = 1
    if len(values) >= period:
        start = period
    for i in range(start, len(values)):
        s = values[i]*k + ema[-1]*(1-k)
        ema.append(s)
    # –≤—ã—Ä–æ–≤–Ω—è—Ç—å –¥–ª–∏–Ω—É
    if len(ema) < len(values):
        ema = [ema[0]]*(len(values)-len(ema)) + ema
    return ema

def atr_percent(highs, lows, closes, period=14):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ATR –≤ –¥–æ–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.05=5%) ‚Äî –±–µ—Ä—ë–º ATR/close.
    """
    n = len(closes)
    if n < period+1:
        return None
    trs = []
    prev_close = closes[0]
    for i in range(1, n):
        tr = max(highs[i]-lows[i], abs(highs[i]-prev_close), abs(lows[i]-prev_close))
        trs.append(tr)
        prev_close = closes[i]
    # simple moving average TR –∑–∞ 'period' –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    if len(trs) < period:
        return None
    atr = sum(trs[-period:]) / period
    last_close = closes[-1]
    if last_close <= 0:
        return None
    return atr / last_close

# --------- –õ–æ–≥–∏–∫–∞ —Å–∏–ª—ã/—Å–∏–≥–Ω–∞–ª–∞ ----------
def compute_strength(ema_f, ema_s):
    # %-—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ EMA: |EMA9-EMA21|/EMA21
    return abs(ema_f - ema_s) / max(1e-9, ema_s)

def near_cross(ema_f, ema_s, eps):
    return abs(ema_f - ema_s) / max(1e-9, ema_s) <= eps

def slope(series):
    if len(series) < 2:
        return 0.0
    return (series[-1] - series[-2]) / max(1e-9, series[-2])

def should_alert(ema9, ema21, ema9_series, atr_val):
    # 1) ATR –≤ –∫–æ—Ä–∏–¥–æ—Ä–µ
    if atr_val is None or not (CONFIG["atr_min"] <= atr_val <= CONFIG["atr_max"]):
        return False, f"ATR {atr_val*100:.2f}% –≤–Ω–µ [{CONFIG['atr_min']*100:.2f}..{CONFIG['atr_max']*100:.2f}]"
    # 2) —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
    st = compute_strength(ema9, ema21)
    if st >= CONFIG["strength"]:
        return True, f"strength {st*100:.2f}% >= {CONFIG['strength']*100:.2f}%"
    # 3) near-cross + –Ω–∞–∫–ª–æ–Ω EMA9
    if near_cross(ema9, ema21, CONFIG["near_cross_eps"]):
        sl = slope(ema9_series)
        if sl >= CONFIG["ema_slope_min"]:
            return True, f"near-cross {CONFIG['near_cross_eps']*100:.2f}%, slope {sl:.5f}"
    return False, f"weak strength {st*100:.2f}%"

def tf_label(tf: str) -> str:
    return tf

# --------- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–æ–∫ ----------
def analyze_symbol(symbol: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (signal_text|None, reason, used_tf)
    """
    # –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–π TF
    for tf in (CONFIG["base_tf"], CONFIG["fallback_tf"]):
        candles = fetch_candles(symbol, tf)
        if len(candles) < CONFIG["min_candles"]:
            reason = f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π ({len(candles)}<{CONFIG['min_candles']}) –Ω–∞ {tf}"
            continue

        closes = [c[4] for c in candles]
        highs  = [c[2] for c in candles]
        lows   = [c[3] for c in candles]

        ema9  = ema_series(closes, CONFIG["ema_fast"])
        ema21 = ema_series(closes, CONFIG["ema_slow"])

        if len(ema9) < CONFIG["min_candles"] or len(ema21) < CONFIG["min_candles"]:
            reason = f"EMA –Ω–µ –≥–æ—Ç–æ–≤—ã –Ω–∞ {tf}"
            continue

        e9  = ema9[-1]
        e21 = ema21[-1]
        atr = atr_percent(highs, lows, closes, period=14)

        ok, why = should_alert(e9, e21, ema9, atr if atr is not None else 0.0)
        if not ok:
            # —Ç–∏—Ö–æ ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –¥—Ä—É–≥–∏–º tf (fallback) –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ for
            reason = why
            if tf == CONFIG["fallback_tf"]:
                return None, reason, tf
            continue

        side = "LONG üìà" if e9 > e21 else "SHORT üìâ"
        msg = (
            f"üîî <b>{symbol}</b> {side}\n"
            f"TF: {tf_label(tf)} | ATR: {atr*100:.2f}% | ŒîEMA: {abs(e9-e21)/e21*100:.2f}%\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {why}\n"
            f"‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        )
        return msg, why, tf

    # –ù–∏ –Ω–∞ –æ–¥–Ω–æ–º TF –Ω–µ –ø—Ä–æ—à–ª–æ
    return None, reason if 'reason' in locals() else "—Ç–∏—Ö–æ", CONFIG["base_tf"]

def can_alert_symbol(symbol: str) -> bool:
    last = _symbol_cooldown.get(symbol, 0.0)
    return (now_ts() - last) >= CONFIG["cooldown_min"]*60.0

def mark_alert_symbol(symbol: str):
    _symbol_cooldown[symbol] = now_ts()

def scan_loop():
    global _last_signal_ts_any, _last_alive_notice_ts
    log("Scan loop started")
    send_msg(TELEGRAM_CHAT_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Å–∏–≥–Ω–∞–ª—å–Ω—ã–π). –ò—Å–ø–æ–ª—å–∑—É–π /mode ultra –∏–ª–∏ /mode normal –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞.")
    while True:
        started = now_ts()
        any_signal = False
        reasons = []  # —Å–æ–±–∏—Ä–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ø–æ –º–æ–Ω–µ—Ç–∞–º, –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –∂–∏–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞

        for sym in CONFIG["symbols"]:
            try:
                text, reason, used_tf = analyze_symbol(sym)
                if text and can_alert_symbol(sym):
                    send_msg(TELEGRAM_CHAT_ID, text)
                    mark_alert_symbol(sym)
                    any_signal = True
                    _last_signal_ts_any = now_ts()
                else:
                    reasons.append(f"{sym}:{used_tf} {reason}")
            except Exception as e:
                reasons.append(f"{sym}: –æ—à–∏–±–∫–∞ {e}")

        # –ï—Å–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –±—ã–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º ¬´–∂–∏–≤¬ª
        nowt = now_ts()
        if (nowt - _last_signal_ts_any) >= 3600 and (nowt - _last_alive_notice_ts) >= 3600:
            msg = "üü° –ñ–∏–≤. –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –±—ã–ª–æ.\n" \
                  + ("–ü—Ä–∏—á–∏–Ω—ã:\n" + "\n".join(reasons[:10]) if reasons else "")
            send_msg(TELEGRAM_CHAT_ID, msg)
            _last_alive_notice_ts = nowt

        # –î–µ—Ä–∂–∏–º –ø–µ—Ä–∏–æ–¥
        elapsed = now_ts() - started
        sleep_s = max(1.0, CONFIG["check_interval_s"] - elapsed)
        time.sleep(sleep_s)

# --------- Telegram –∫–æ–º–∞–Ω–¥—ã (Long Poll) ----------
def handle_command(chat_id: str, text: str):
    # —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–≤–æ–µ–≥–æ —á–∞—Ç–∞
    if str(chat_id) != str(TELEGRAM_CHAT_ID):
        return

    parts = text.strip().split()
    cmd = parts[0].lower()
    args = parts[1:]

    if cmd == "/start":
        send_msg(chat_id, "üëã –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ö–æ–º–∞–Ω–¥—ã: /status, /mode ultra|normal, /setstrength, /setatr, /setmincandles, /setcooldown, /setcheck, /setsymbols")
    elif cmd == "/status":
        cfg = CONFIG
        msg = (
            "üìü <b>–°—Ç–∞—Ç—É—Å</b>\n"
            f"–ú–æ–Ω–µ—Ç—ã: {', '.join(cfg['symbols'])}\n"
            f"TF: base={cfg['base_tf']} fallback={cfg['fallback_tf']}\n"
            f"EMA: {cfg['ema_fast']}/{cfg['ema_slow']}\n"
            f"MIN_CANDLES: {cfg['min_candles']}\n"
            f"strength: {cfg['strength']*100:.2f}%\n"
            f"ATR: {cfg['atr_min']*100:.2f}% ‚Äî {cfg['atr_max']*100:.2f}%\n"
            f"check: {cfg['check_interval_s']}s | cooldown: {cfg['cooldown_min']}m\n"
        )
        send_msg(chat_id, msg)
    elif cmd == "/mode":
        if len(args) != 1:
            send_msg(chat_id, "‚ùå –ü—Ä–∏–º–µ—Ä: /mode ultra  | /mode normal")
            return
        if apply_mode(args[0]):
            send_msg(chat_id, f"‚úÖ –†–µ–∂–∏–º {args[0].upper()} –ø—Ä–∏–º–µ–Ω—ë–Ω.")
            handle_command(chat_id, "/status")
        else:
            send_msg(chat_id, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π ultra | normal")
    elif cmd == "/setstrength":
        if len(args) != 1:
            send_msg(chat_id, "‚ùå –ü—Ä–∏–º–µ—Ä: /setstrength 0.03  (–∏–ª–∏ 3%)")
            return
        try:
            val = _parse_pct(args[0])
            if not (0.001 <= val <= 0.20):
                send_msg(chat_id, "‚ùå strength –¥–æ–ø—É—Å—Ç–∏–º–æ 0.10%..20%")
                return
            CONFIG["strength"] = val
            send_msg(chat_id, f"‚úÖ strength = {val*100:.2f}%")
        except Exception as e:
            send_msg(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    elif cmd == "/setatr":
        if len(args) != 2:
            send_msg(chat_id, "‚ùå –ü—Ä–∏–º–µ—Ä: /setatr 0.05 0.10  (–∏–ª–∏ 5% 10%)")
            return
        try:
            lo = _parse_pct(args[0]); hi = _parse_pct(args[1])
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ —É —Ç–µ–±—è –±–æ—Ç –¥–µ—Ä–∂–∞–ª 5..10%, –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫–∏–µ –ø—Ä–µ–¥–µ–ª—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
            lo = max(lo, 0.05); hi = min(hi, 0.10)
            if not (lo < hi):
                send_msg(chat_id, "‚ùå ATR: min –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å < max. –î–∏–∞–ø–∞–∑–æ–Ω 5%..10%.")
                return
            CONFIG["atr_min"], CONFIG["atr_max"] = lo, hi
            send_msg(chat_id, f"‚úÖ ATR: {lo*100:.2f}% ‚Äî {hi*100:.2f}%")
        except Exception as e:
            send_msg(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    elif cmd == "/setmincandles":
        if len(args) != 1:
            send_msg(chat_id, "‚ùå –ü—Ä–∏–º–µ—Ä: /setmincandles 10")
            return
        try:
            v = int(float(args[0]))
            v = max(5, min(200, v))
            CONFIG["min_candles"] = v
            send_msg(chat_id, f"‚úÖ MIN_CANDLES = {v}")
        except Exception as e:
            send_msg(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    elif cmd == "/setcooldown":
        if len(args) != 1:
            send_msg(chat_id, "‚ùå –ü—Ä–∏–º–µ—Ä: /setcooldown 10")
            return
        try:
            m = int(float(args[0]))
            m = max(1, min(120, m))
            CONFIG["cooldown_min"] = m
            send_msg(chat_id, f"‚úÖ cooldown = {m} –º–∏–Ω")
        except Exception as e:
            send_msg(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    elif cmd == "/setcheck":
        if len(args) != 1:
            send_msg(chat_id, "‚ùå –ü—Ä–∏–º–µ—Ä: /setcheck 120  (—Å–µ–∫—É–Ω–¥—ã)")
            return
        try:
            s = int(float(args[0]))
            s = max(15, min(600, s))
            CONFIG["check_interval_s"] = s
            send_msg(chat_id, f"‚úÖ check = {s} —Å–µ–∫")
        except Exception as e:
            send_msg(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    elif cmd == "/setsymbols":
        if not args:
            send_msg(chat_id, "‚ùå –ü—Ä–∏–º–µ—Ä: /setsymbols BTCUSDT,ETHUSDT,SOLUSDT")
            return
        raw = " ".join(args)
        parts = [p.strip().upper() for p in raw.replace(";", ",").split(",")]
        parts = [p for p in parts if p.endswith("USDT")]
        if not parts:
            send_msg(chat_id, "‚ùå –£–∫–∞–∂–∏ –ø–∞—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT,ETHUSDT")
            return
        CONFIG["symbols"] = parts
        send_msg(chat_id, f"‚úÖ –ú–æ–Ω–µ—Ç—ã: {', '.join(parts)}")
    else:
        # –∏–≥–Ω–æ—Ä–∏–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        pass

def tg_polling_loop():
    global _updates_offset
    log("TG polling started")
    while True:
        try:
            resp = requests.get(
                tg_url("getUpdates"),
                params={"timeout": 50, "offset": _updates_offset},
                timeout=70
            ).json()
            if not resp.get("ok"):
                time.sleep(2)
                continue
            for upd in resp.get("result", []):
                _updates_offset = max(_updates_offset, upd["update_id"] + 1)
                msg = upd.get("message") or upd.get("edited_message")
                if not msg: 
                    continue
                chat_id = msg["chat"]["id"]
                text = msg.get("text", "") or ""
                if not text:
                    continue
                handle_command(chat_id, text)
        except Exception as e:
            log(f"TG poll error: {e}")
            time.sleep(2)

# --------- Flask keep-alive ----------
@app.route("/")
def root():
    return jsonify({"status":"ok","time": datetime.now().isoformat()})

@app.route("/ping")
def ping():
    return "pong", 200

# --------- –ó–∞–ø—É—Å–∫ ----------
def main():
    # –ø—Ä–∏–≤–µ—Ç –∏ —Å—Ç–∞—Ç—É—Å
    apply_mode("ultra")  # –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —É–ª—å—Ç—Ä–∞ ‚Äî –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É
    log("Starting threads...")
    t1 = threading.Thread(target=scan_loop, daemon=True)
    t2 = threading.Thread(target=tg_polling_loop, daemon=True)
    t1.start(); t2.start()

    port = int(os.environ.get("PORT", "8000"))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
