# -*- coding: utf-8 -*-
# Bitget Spot EMA 7/14 ‚Äî —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç (–±–µ–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏).
# –®–ª—ë—Ç BUY/SELL –≤ Telegram, —Å –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º –∏ health-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è Render.

import os
import time
import threading
from datetime import datetime, timezone
from typing import List, Dict, Optional

import requests
from flask import Flask, jsonify

# =========== –¢–ï–õ–ï–ì–†–ê–ú ===========
TELEGRAM_BOT_TOKEN = "7630671081:AAG17gVyITruoH_CYreudyTBm5RTpvNgwMA"
TELEGRAM_CHAT_ID   = "5723086631"

def tg_send(text: str):
    try:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json={"chat_id": TELEGRAM_CHAT_ID, "text": text, "disable_web_page_preview": True},
            timeout=10
        )
    except Exception:
        pass

# =========== –ù–ê–°–¢–†–û–ô–ö–ò ===========
SYMBOLS = ["BTCUSDT","ETHUSDT","SOLUSDT","XRPUSDT","TRXUSDT","PEPEUSDT","BGBUSDT"]  # —Å–ø–æ—Ç Bitget
GRANULARITY = 60            # 1m —Å–≤–µ—á–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
CANDLES_LIMIT = 220         # —Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π —Ç—è–Ω—É—Ç—å (–¥–ª—è —É—Å—Ç–æ–π—á–∏–≤—ã—Ö EMA)
EMA_FAST = 7
EMA_SLOW = 14
MIN_EDGE = 0.001            # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä—ã–≤ |EMA7-EMA14|/price (0.1%) ‚Äî –æ—Ç—Å–µ–∫–∞–µ—Ç —Å–ª–∞–±—ã–µ –∫—Ä–æ—Å—Å—ã
COOLDOWN_SEC = 60           # –Ω–µ —á–∞—â–µ 1 —Å–∏–≥–Ω–∞–ª–∞ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ –ø–∞—Ä—É
POLL_SEC = 10               # –ø–µ—Ä–∏–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

BITGET = "https://api.bitget.com"
HEADERS = {"User-Agent": "bitget-ema-signal-bot/1.0"}

# –ø–∞–º—è—Ç—å: –∫–æ–≥–¥–∞ –∏ –∫–∞–∫–æ–π —Å–∏–≥–Ω–∞–ª —Å–ª–∞–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É
last_signal_time: Dict[str, float] = {s: 0.0 for s in SYMBOLS}
last_state: Dict[str, Optional[int]] = {s: None for s in SYMBOLS}  # 1=fast>slow, -1=fast<slow

# =========== –£–¢–ò–õ–ò–¢–´ ===========
def now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()

def ema(values: List[float], period: int) -> List[Optional[float]]:
    """EMA c –ø—Ä–æ–≥—Ä–µ–≤–æ–º: –ø–µ—Ä–≤—ã–µ period-1 = None, –∑–∞—Ç–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è EMA."""
    n = len(values)
    if n < period: 
        return [None]*n
    k = 2 / (period + 1)
    out: List[Optional[float]] = [None]*(period-1)
    sma = sum(values[:period]) / period
    out.append(sma)
    prev = sma
    for v in values[period:]:
        prev = v*k + prev*(1-k)
        out.append(prev)
    return out

def fetch_candles(symbol: str, gran: int, limit: int = 200):
    """
    Bitget v2 spot candles:
    GET /api/v2/spot/market/candles?symbol=BTCUSDT&granularity=60&limit=200
    –û—Ç–≤–µ—Ç data: [[ts, o, h, l, c, baseVol, quoteVol], ...] (–Ω–æ–≤—ã–µ -> —Å—Ç–∞—Ä—ã–µ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
    """
    url = f"{BITGET}/api/v2/spot/market/candles"
    params = {"symbol": symbol, "granularity": str(gran), "limit": str(limit)}
    r = requests.get(url, params=params, headers=HEADERS, timeout=15)
    r.raise_for_status()
    data = r.json()
    rows = data.get("data") or []
    # –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    rows.sort(key=lambda x: int(x[0]))
    closes = [float(row[4]) for row in rows]
    return closes

def detect_signal(closes: List[float]) -> Optional[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'BUY'|'SELL'|None –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É –±–∞—Ä—É (–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–µ)."""
    if len(closes) < max(EMA_SLOW, EMA_FAST) + 2:
        return None
    e_fast = ema(closes, EMA_FAST)
    e_slow = ema(closes, EMA_SLOW)
    # –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏:
    f_prev, s_prev = e_fast[-2], e_slow[-2]
    f_now,  s_now  = e_fast[-1], e_slow[-1]
    if None in (f_prev, s_prev, f_now, s_now):
        return None

    # —Ñ–∏–ª—å—Ç—Ä "—Å–∏–ª—ã" –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    edge = abs(f_now - s_now) / max(closes[-1], 1e-12)
    if edge < MIN_EDGE:
        return None

    crossed_up   = (f_prev <= s_prev) and (f_now > s_now)
    crossed_down = (f_prev >= s_prev) and (f_now < s_now)
    if crossed_up:   return "BUY"
    if crossed_down: return "SELL"
    return None

def process_symbol(symbol: str):
    try:
        closes = fetch_candles(symbol, GRANULARITY, max(CANDLES_LIMIT, EMA_SLOW+50))
    except Exception as e:
        print(f"[{symbol}] fetch error: {e}")
        return

    if not closes:
        return

    signal = detect_signal(closes)
    price = closes[-1]

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ fast vs slow
    e_fast = ema(closes, EMA_FAST)
    e_slow = ema(closes, EMA_SLOW)
    if e_fast[-1] is None or e_slow[-1] is None:
        return
    state_now = 1 if e_fast[-1] > e_slow[-1] else -1
    last_state[symbol] = state_now

    if not signal:
        return

    # –∞–Ω—Ç–∏—Å–ø–∞–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if time.time() - last_signal_time.get(symbol, 0) < COOLDOWN_SEC:
        return

    last_signal_time[symbol] = time.time()

    msg = (
        f"üîî {signal} {symbol}\n"
        f"–¶–µ–Ω–∞: {price:.6f}\n"
        f"EMA{EMA_FAST}/{EMA_SLOW} (TF 1m)\n"
        f"{now_iso()}"
    )
    tg_send(msg)

# =========== –§–û–ù–û–í–´–ô –¶–ò–ö–õ ===========
def worker():
    tg_send(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! EMA {EMA_FAST}/{EMA_SLOW}, TF 1m. "
            f"–°–∏–≥–Ω–∞–ª—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –Ω–æ–≤—ã–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è–º (edge‚â•{MIN_EDGE*100:.1f}%).")
    while True:
        start = time.time()
        for s in SYMBOLS:
            process_symbol(s)
        # —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π —Ü–∏–∫–ª
        dt = time.time() - start
        time.sleep(max(1.0, POLL_SEC - dt))

# =========== FLASK (health –¥–ª—è Render) ===========
app = Flask(__name__)

@app.get("/")
def root():
    return jsonify({
        "ok": True,
        "time": now_iso(),
        "symbols": SYMBOLS,
        "tf": "1m",
        "ema": f"{EMA_FAST}/{EMA_SLOW}",
        "cooldown_sec": COOLDOWN_SEC
    })

# =========== ENTRYPOINT ===========
if __name__ == "__main__":
    # —Å—Ç–∞—Ä—Ç—É–µ–º —Å–∫–∞–Ω–µ—Ä –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=worker, daemon=True).start()
    # –¥–µ—Ä–∂–∏–º –ø–æ—Ä—Ç –¥–ª—è Render
    port = int(os.environ.get("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
